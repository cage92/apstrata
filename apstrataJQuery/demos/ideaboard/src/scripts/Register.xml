<script>
<scriptACL>
	<execute>anonymous</execute>
</scriptACL>
<code><![CDATA[
/**
 *  Saves a document with the user data and a randomized registration code to the "DefaultStore",
 * then sends an email with the registration code to the user.
 *
 * @param firstname
 * @param lastname
 * @param email
 * @param password
 *
 * @return On success: { status: "success" }
 *         On failure: { status: "failure", errorDetail: "[error message]" }
 */

// START: Parameter checks
var firstname = request.parameters.firstname;
var lastname = request.parameters.lastname;
var email = request.parameters.email;
var password = request.parameters.password;

if (email == null || email == '' || password == null || password == '' || firstname == null
    || firstname == '' || lastname == null || lastname == '') {
  return { status: "error", errorDetail: "These fields are required: email, password, firstname, lastname" };
}
// END: Parameter checks

// 1. We want the whole process to be transactional so we open a new transaction here.
var transaction = apsdb.beginTransaction();

try {
  // START: Integrity checks
  // 2. Check that there is no pending registration document that has the same email.
  var registrationQueryParams = {
    "apsdb.query": 'apsdb.schema="pendingRegistration" AND email="' + email + '"',
    "apsdb.count": "true"
  };
  var registrationQueryResult = apsdb.callApi("Query", registrationQueryParams, null);
  if (registrationQueryResult.metadata.status == "failure") {
    throw Error("An error occurred while querying for pending registrations with the same email ["
                + registrationQueryResult.metadata.errorCode + "]");
  } else if (registrationQueryResult.result.count != '0') {
    throw Error("There already is a pending registration with the same email");
  }

  // 3. Check that there are no users that have the same email.
  var getUserParams = {
    "login": email
  };
  var getUserResult = apsdb.callApi("GetUser", getUserParams, null);
  if (getUserResult.metadata.status != 'failure') {
    throw Error("A user with the same email already exists");
  } else if (getUserResult.metadata.status == 'failure' && getUserResult.metadata.errorCode != 'INVALID_USER') {
    throw Error("An error occurred while querying for users with the same email ["
                + getUserResult.metadata.errorCode + "]");
  }
  // END: Integrity checks

  // 4. Save the registration document.
  var configuration = apsdb.require("Configuration");
  var saveDocumentParams = {
    "apsdb.update": "false",
    "firstname": firstname,
    "lastname": lastname,
    "email": email,
    "username": email,
    "password": password,
    "apsdb.schema": "pendingRegistration"
  };
  var userSaveDocumentResult = apsdb.callApi("SaveDocument", saveDocumentParams, null);
  if (userSaveDocumentResult.metadata.status == 'failure')
    throw Error("Unable to save document [" + userSaveDocumentResult.metadata.errorCode + "]");

  // 5. Send a verification email to the user.
  var documentKey = userSaveDocumentResult.result.document.key;
  var emailSubject = 'Duffy Registration';
  var emailBody = "<div style=\"font-family:Calibri, font-size:11\">Hello "
          + ((firstname != "" || lastname != "") ? firstname + " " + lastname : email)+ ",<br/><br/>"
          + "Thank you for making a Duffy account.<br/><br/>" 
          + "Your verification code is: "
          + documentKey + "<br/><br/>"
          + "You can verify account by clicking "
          + '<a href="' + configuration.serviceURL + '/RunScript?apsws.authMode=simple&apsdb.scriptName=Verify&email='
          + email + '&d=' + documentKey + '&returnJSON=false">'
          + 'here</a><br/>'
          + "(If the link doesn't work ... try copy/pasting it into the address bar)<br/>"
          + "<br/>"
          + "The Duffy team<br/>"
          + "<a href=\"mailto:" + request.account.adminEmail + "\">" + request.account.adminEmail
          + "</a><br/></div>";

  var sendEmailParams = {
    "apsma.from": request.account.adminEmail,
    "apsma.to": email,
    "apsma.subject": emailSubject,
    "apsma.htmlBody": emailBody
  };
  var userSendEmailResult = apsdb.callApi("SendEmail", sendEmailParams, null);
  if (userSendEmailResult.metadata.status == 'failure')
    throw Error("Unable to send email [" + userSendEmailResult.metadata.errorCode + "]");
} catch (exception) {
  // If we had any errors/exceptions we want to be sure we rollback the transaction.
  transaction.rollback();
  return { "status": "error", "errorDetail": exception.message };
}

transaction.commit();
return { "status": "success" };

]]>
</code>
</script>