<project name="apstrataCMC" default="update-scripts-schemas-configurations" basedir="../">
		
	<!-- input addproperty="node.name" validargs="hudson,dev,apps,sandbox,demo" defaultvalue="dev" message="Please enter the node name. Default is dev"></input -->
	<property name="node.name" value="dev" />
	<property file="${basedir}/build/apstrata.account.${node.name}.properties"/>
	<property file="${basedir}/build/build.${node.name}.properties"/>

	
	
	<target name="getProperties" if="interactive.mode">
		
			<input addproperty="apstratabase.url" defaultvalue="${apsdb.deploy.rest.url}" message="Please enter the apstrata rest url."></input>
			<input addproperty="apstratabase.customer" defaultvalue="${apsdb.api.key}" message="Please enter the customer authkey."></input>
			<input addproperty="apstratabase.secret"  defaultvalue="${apsdb.secret}" message="Please enter the customer secret."></input>
			
			<input addproperty="apstratabase.scripts.dir" defaultvalue="${apsdb.scripts.dir}" message="Please select your scripts folder."></input>
			<input addproperty="apstratabase.apstratascripts.dir" defaultvalue="${apsdb.apstratascripts.dir}" message="Please select your scripts folder."></input>
			<input addproperty="apstratabase.schemas.dir" defaultvalue="${apsdb.schemas.dir}" message="Please select your schemas folder."></input>
			<input addproperty="apstratabase.queries.dir" defaultvalue="${apsdb.queries.dir}" message="Please select your queries folder."></input>
		
	</target>
<!-- 
	<target name="update-all-libraries" description="Updates all the project client libraries">
        <antcall target="update-apstrataSDK-library"/>
		<antcall target="update-dojo-library"/>
    </target>	
	
	<target name="update-apstrataSDK-library" description="Get the specified revesion from SVN googlecode for the apstrata SDK">
		<path id="build.class.path">
	        <fileset dir="${basedir}/build/lib" includes="*.jar,*.zip"/>
	    </path>
		<taskdef name="svn" classpath="${basedir}/build/lib/svnant.jar" classname="org.tigris.subversion.svnant.SvnTask" >
			<classpath refid="build.class.path" />
		</taskdef>		
		
		<echo message="Getting the apstrataSDK library" />
		<delete dir="${basedir}/src/ui/lib/apstrata" failonerror="false" />
		<svn>
			<export srcUrl="${apstrataSDK.svn.repository}/ApstrataSDK/apstrata" revision="${apstrataSDK.svn.revision}" destPath="${basedir}/src/ui/lib/apstrata"/>
		</svn>
	</target>
		
	<target name="update-dojo-library" description="Get the specified revision from remote or local for the dojo library">
		<path id="build.class.path">
	        <fileset dir="${basedir}/build/lib" includes="*.jar,*.zip"/>
	    </path>
		<taskdef name="svn" classpath="${basedir}/build/lib/svnant.jar" classname="org.tigris.subversion.svnant.SvnTask" >
			<classpath refid="build.class.path" />
		</taskdef>		
		
		<echo message="Getting the dojo library" />
		<taskdef classpath="lib/ant-contrib-1.0b1.jar" resource="net/sf/antcontrib/antlib.xml" />
    	<if>
    		<isset property="interactive.mode"/>
    		<then>
    	    	<input addproperty="dojo.location" validargs="remote,local" defaultvalue="local" message="Please enter where to get Dojo from. Default is local.">
    	    			</input>	
    		</then>
    		<else>
    			<property name="dojo.location" value="remote"/>    			
    		</else>
    	</if>				
		<delete dir="${basedir}/src/ui/lib/dojo" failonerror="false" />
		<echo message="${dojo.path}" />
    	<if>
    		<equals arg1="${dojo.location}" arg2="remote" />
    		<then>
    			<get src="http://download.dojotoolkit.org/release-${dojo.revision}/dojo-release-${dojo.revision}-src.tar.gz" dest="${basedir}/src/ui/lib/dojo.tar.gz" verbose="true"/>	
    		</then>
    		<else>
    			<copy tofile="${basedir}/src/ui/lib/dojo.tar.gz" file="${dojo.path}/dojo-release-${dojo.revision}-src.tar.gz" overwrite="true"></copy>
    		</else>
    	</if>	
		<gunzip src="${basedir}/src/ui/lib/dojo.tar.gz" dest="${basedir}/src/ui/lib/dojo.tar"/>
		<untar src="${basedir}/src/ui/lib/dojo.tar" dest="${basedir}/src/ui/lib/"/>
        <move file="${basedir}/src/ui/lib/dojo-release-${dojo.revision}-src" tofile="${basedir}/src/ui/lib/dojo"/>
        <delete file="${basedir}/src/ui/lib/dojo.tar"/>
        <delete file="${basedir}/src/ui/lib/dojo.tar.gz"/>
	</target>	
		
	<target name="update-ui-files" depends="getProperties">
		<echo message="Changing propeties in the Init.js file" />
		<copy tofile="${basedir}/src/ui/amc/Init.js" file="${basedir}/build/Init.js" overwrite="true">
			<filterset>
				<filter token="appRestURL" value="${app.rest.url}" />
				<filter token="appSiteURL" value="${app.site.url}" />
				<filter token="apiKey" value="${apsdb.api.key}" />
			</filterset>
		</copy>
	</target>
 -->
	<target name="update-scripts-schemas-configurations" depends="getProperties">
 <!-- 
		<echo message="changing properties in the scripts before putting them on the apiKey" />
		
		<copy tofile="${basedir}/src/apsdb/scripts/Global.Common.js" file="${basedir}/build/Global.Common.js" overwrite="true">
			<filterset>
				<filter token="appSiteURL" value="${app.site.url}" />
				<filter token="appRestURL" value="${app.rest.url}" />
				<filter token="projectName" value="${project.name}" />
				<filter token="apiKey" value="${apsdb.api.key}" />
				<filter token="adminEmail" value="${app.admin.email}" />
				<filter token="billingAccount" value="${billing.account.key}" />
				<filter token="websiteAccount" value="${website.account.key}" />
				<filter token="apstrataAttachmentsRoot" value="${apsdb.attachments}" />
			</filterset>
		</copy>	
		<antcall target="update-ui-files" />
	-->
		<echo message="Update scripts and schemas" />

		
		<!-- Set the properties in case they were not already set. -->

		<property name="apstratabase.url" value="${apsdb.deploy.rest.url}" />
		<property name="apstratabase.customer" value="${apsdb.api.key}" />
		<property name="apstratabase.secret" value="${apsdb.secret}" />
		<property name="apstratabase.scripts.dir" value="${apsdb.scripts.dir}" />
		<property name="apstratabase.schemas.dir" value="${apsdb.schemas.dir}" />
		<property name="apstratabase.queries.dir" value="${apsdb.queries.dir}" />

		<path id="build.class.path">
	        <fileset dir="${basedir}/build/lib" includes="*.jar,*.zip"/>
	    </path>	
	<echo message="${basedir}/build/lib/services.jar" />
		<taskdef name="callService" 
				 classpath="${basedir}/build/lib/services.jar"
				 classname="com.apstrata.ant.CallService" >
			<classpath refid="build.class.path" />
		</taskdef>

		<echo message="Issuing DeleteScript.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="DeleteScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.scripts.dir}" casesensitive="yes">
			    <include name="**/*.js"/>
			</fileset>
		</callService>
		
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="DeleteScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.apstratascripts.dir}" casesensitive="yes">
			    <include name="**/*.js"/>
			</fileset>
		</callService>
			
		<echo message="Issuing SaveScript.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.scripts.dir}" casesensitive="yes">
			    <include name="**/*.js"/>
			</fileset>
		</callService>
	<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.apstratascripts.dir}" casesensitive="yes">
			    <include name="**/*.js"/>
			</fileset>
		</callService>
		
		<echo message="Issuing DeleteScript on XML scripts.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="DeleteScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.scripts.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>
			<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="DeleteScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.apstratascripts.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>
			
		<echo message="Issuing SaveScript on XML scripts.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.scripts.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>	
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveScript" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.apstratascripts.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>	
				
		<echo message="Issuing SaveSchema.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveSchema" secret="${apstratabase.secret}">				
			<param name="apsdb.update" value="false"/>
			<fileset dir="${apstratabase.schemas.dir}" casesensitive="yes" >
			    <include name="**/*.xml"/>
			</fileset>
		</callService>

		<echo message="Issuing DeleteSavedQuery.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="DeleteSavedQuery" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.queries.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>
			
		<echo message="Issuing SaveQuery.." />
		<callService url="${apstratabase.url}" customer="${apstratabase.customer}" action="SaveQuery" secret="${apstratabase.secret}">
			<fileset dir="${apstratabase.queries.dir}" casesensitive="yes">
			    <include name="**/*.xml"/>
			</fileset>
		</callService>	

	</target>		
<!--     
	<target name="read-revision-number">
		<taskdef classpath="lib/ant-contrib-1.0b1.jar" resource="net/sf/antcontrib/antlib.xml" />
		<if>
			<not>
			<isset property="versionNumber"/>
			</not>
		    <then>
		    	<exec executable="svnversion" outputproperty="versionNumber">
		    		<arg line="${basedir}"/>
		    	</exec>
		    </then>
		</if>				
		
		<echo>${versionNumber}</echo>
	</target>

	<target name="package-dojo" depends="read-revision-number">
		<copy todir="${basedir}/src/ui/lib/dojo/util/buildscripts">
			<fileset dir="${basedir}/src/dojopackaging"/>
		</copy>
		<chmod file="${basedir}/src/ui/lib/dojo/util/buildscripts/amc.build.sh" perm="u+x"/>
		<chmod file="${basedir}/src/ui/lib/dojo/util/buildscripts/build.sh" perm="u+x"/>
		<echo>executing touch-appstore.build.sh with env var ${versionNumber}</echo>
		<exec dir="${basedir}/src/ui/lib/dojo/util/buildscripts" executable="./amc.build.sh" >
			<env key="versionNumber" value="${versionNumber}"/>
		</exec>
	</target>

	<target name="build-work-copy">
		<echo>Removing old build folder</echo>
		<delete dir="${basedir}/build/work" />

		<echo>Copying to ${basedir}/build/work</echo>
		<copy todir="${basedir}/build/work">
			<fileset dir="${basedir}/src/ui"/>
		</copy>
	</target>
	-->
	<!-- 
	<target name="delete-source">
		<taskdef classpath="lib/ant-contrib-1.0b1.jar" resource="net/sf/antcontrib/antlib.xml" />
		<if>
			<equals arg1="${compactPackage}" arg2="true" />
			<then>
				<echo>Deleting source files and folders from build</echo>
		 -->
				<!-- delete build/work/demo -->
		<!-- 	<delete dir="${basedir}/build/work/demo"/>-->
				<!-- delete build/work/index.html-packaged|index.html-unpackaged|demo.html-packaged|demo.html-unpackaged -->
		<!--		<delete>
					<fileset dir="${basedir}/build/work" includes="*html-packaged *html-unpackaged"/>
				</delete>-->
				<!-- delete build/work/lib/apstrataSDK -->
		<!--		<delete dir="${basedir}/build/work/lib/apstrataSDK"/>-->
				<!-- delete build/work/lib/elementn -->
		<!--		<delete dir="${basedir}/build/work/lib/elementn"/>-->
				<!-- delete build/work/lib/horizon -->
		<!--		<delete dir="${basedir}/build/work/lib/horizon"/>-->
				<!-- delete build/work/lib/dojo/dijit -->
		<!--		<delete dir="${basedir}/build/work/lib/dojo/dijit"/>-->
				<!-- delete build/work/lib/dojo/dojo -->
		<!--		<delete dir="${basedir}/build/work/lib/dojo/dojo"/>-->
				<!-- delete build/work/lib/dojo/dojox -->
		<!--		<delete dir="${basedir}/build/work/lib/dojo/dojox"/>-->
				<!-- delete build/work/lib/dojo/util -->
		<!--		<delete dir="${basedir}/build/work/lib/dojo/util"/>-->
				<!-- delete from build/work/lib/dojo/release/dojo/apstrata [delete all except horizon/resources/images + resources] -->
		<!--		<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/apstrata">
						<exclude name="horizon/resources/images/**" />
						<exclude name="resources/**" />
					</fileset>
				</delete>-->
				<!-- delete from build/work/lib/dojo/release/dojo/dijit [delete all except themes/claro] -->
		<!--	<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/dijit">
						<exclude name="themes/claro/**" />
					</fileset>
				</delete>-->
				<!-- delete from build/work/lib/dojo/release/dojo/dojo [delete all except dojo.js|demo.js + uncompressed.js] -->
		<!--		<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/dojo">
						<exclude name="dojo.js" />
						<exclude name="dojo.js.uncompressed.js" />
						<exclude name="demo.js" />
						<exclude name="demo.js.uncompressed.js" />
						<exclude name="nls/**" />
						<exclude name="resources/**" />
					</fileset>
				</delete>-->
				<!-- delete from build/work/lib/dojo/release/dojo/dojox [delete all except grid/resources] -->
		<!--		<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/dojox">
						<exclude name="grid/resources/**" />
					</fileset>
				</delete>-->
				<!-- delete from build/work/lib/dojo/release/dojo/elementn [delete all except resources] -->
		<!--		<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/elementn">
						<exclude name="widgets/**" />
					</fileset>
				</delete>-->
				<!-- delete from build/work/lib/dojo/release/dojo/demo [delete all except css + images] -->
		<!--		<delete includeemptydirs="true">
					<fileset dir="${basedir}/build/work/lib/dojo/release/dojo/demo">
						<exclude name="css/**" />
						<exclude name="images/**" />
					</fileset>
				</delete>
				
			</then>
		</if>
	</target>-->
	<!--  
	<target name="generate-deploy-package" description="Calls all the targets needed to produce the deploy ready output in build/work">
		<taskdef classpath="lib/ant-contrib-1.0b1.jar" resource="net/sf/antcontrib/antlib.xml" />
		<if>
			<not>
				<equals arg1="${node.name}" arg2="sandbox" />
			</not>
			<then>
				<if>
					<not>
						<equals arg1="${node.name}" arg2="apps" />
					</not>
					<then>
						<if>
							<not>
								<equals arg1="${node.name}" arg2="demo" />
							</not>
							<then>
								<antcall target="update-scripts-schemas-configurations" />
							</then>
						</if>
					</then>
				</if>
			</then>
		</if>
		<antcall target="update-ui-files" />
		<antcall target="update-all-libraries" />
		<antcall target="package-dojo" />
		<antcall target="build-work-copy" />
		<antcall target="delete-source" />
	</target>
-->
</project>